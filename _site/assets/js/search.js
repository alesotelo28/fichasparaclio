// Based on a script by Kathie Decora : katydecorah.com/code/lunr-and-jekyll/

// Create the lunr index for the search
var index = elasticlunr(function () {
  this.addField('title')
  this.addField('author')
  this.addField('layout')
  this.addField('content')
  this.setRef('id')
});

// Add to this index the proper metadata from the Jekyll content

index.addDoc({
  title: "404: Page not found",
  author: null,
  layout: "default",
  content: "\n  404: Page not found\n  Sorry, we've misplaced that URL or it's pointing to something that doesn't exist. Head back home to try finding it again.\n\n",
  id: 0
});
index.addDoc({
  title: "About",
  author: null,
  layout: "page",
  content: "One of our most pressing and ever revolving needs as scholars is to pass on our textual artifacts from one generation to another. The art of textual editing, among other practices, has helped many cultures to remember and interpret for centuries. Alas, that art is practiced and encouraged in its highest form by a dwindling number of scholars. In a digital environment the problem is compounded by the difficulties of the medium. While vast repositories, and “e-publications” appear on the online scene yearly, very few manifest a textual scholar’s disciplined attention to detail. In contrast, most textual scholars who have made the leap to a rigorous digital practice have focused on markup, relying on technical teams to deploy and maintain their work. This makes your average scholarly digital edition a very costly, and therefore limited affair.\n\nAs we see it, a minimal edition is one that aims to reduce the size and complexity of the back and front end, and the learning curves for the user and the producer. Out of-the-box, this theme can help you build a simple reading edition, or a traditional scholarly edition with footnotes and a bibliography without breaking the bank. In our estimate, these are the two most immediately useful type of editions for editors and readers. An edition produced with Ed consists of static pages whose rate of decay is substantially lower than database-driven systems. As an added bonus, these static pages require less bandwith. Our hope is that our approach can help beginners or veterans deploy beautiful editions with less effort, that it can help us teach a ‘full stack’ in one academic semester, allow us to care for our projects at less cost, and perhaps, just perhaps, allow us to generate high-quality editions on github.io in large quantities based on the git-lit model by Jonathan Reeve. We’re coming for you, Kindle!\n\nSample Ed editions.\n\n\n  Our sample site is the first edition built with Ed.\n  Fugitive Verses: Popular Reprinted Poetry from Nineteenth Century Newspapers\n  mini lazarillo: A minimal edition of the Lazarillo de Tormes\n  Making and Knowing: The BnF Ms Fr 640 in Translation\n  Daisy Miller: A Comedy in Three Acts\n\n\nCurrent Features\n\n  Templates for narrative, drama and poetry\n  Responsive design for mobile phones, tablets and PCs.\n  Relatively easy to learn and teach\n  Works well in high- or low- bandwitdh scenarios\n  Easier for digital archives and libraries to preserve\n  Open source, open access\n  Unobtrusive footnotes\n  Metadata in Dublin Core and OpenGraph to play nice with Zotero, libraries and social media.\n  Automatic table of content generation\n  Simple search functionality\n  Annotations via hypothes.is\n  Optional: Ability to generate well-formatted bibliographies and linked citations\n\n\nInstalling and using Ed\n\nTo learn how to install and begin using Ed, please visit our documentation page.\n",
  id: 1
});
index.addDoc({
  title: null,
  author: null,
  layout: null,
  content: "\n\n\n Ed.\n \n \n 2022-07-20T17:46:34-03:00\n http://localhost:4000\n \n   Alex Gil\n   colibri.alex@gmail.com\n \n\n \n\n\n",
  id: 2
});
index.addDoc({
  title: "Credits",
  author: null,
  layout: "page",
  content: "Susanna Allés Torrent | Hyper philologist\n\nSusanna teaches Digital Humanities in the Department of Latin American and Iberian Cultures. She earned her Ph.D in Romance Studies at the University of Barcelona in 2012, and completed a M.A. in «Nouvelles technologies appliquées à l’histoire» at the École Nationale des Chartes (Paris). She has taught at the University of Barcelona and she has been a postdoctoral fellow at the Spanish National Research Council (CSIC). Her research explores several aspects of digital humanities, especially, scholarly digital editions, electronic text analysis, intertextuality and text reuse, and digital lexicography. She also works with the intersection of the Iberian Peninsula and Italy in the Middle Ages and the Renaissance, reconstructing cultural and literary networks between the two.\n\nTerry Catapano | Metadata ninja\n\nTerry Catapano is a Librarian in Columbia University Libraries’ Digital Program Division. He was Chair of the Society of American Archivists’ Schema Development Team, responsible for the development of Encoded Archival Description version 3, and is a member of the ArchivesSpace Technical Advisory Group and the Editorial Board for the Metadata Encoding and Transmission Standard (METS). As Vice President of Plazi Verein, he leads the development of the TaxPub extension of the National Library of Medicine/National Center for Biotechnology Information Journal Publishing DTD, and has worked on digitizing, text mining, and providing open access to the literature of biological systematics, including collaborations with WikiData, the Encylopedia of Life, the Global Biodiversity Information Facility (GBIF), ZooBank, and CERN.\n\nAlex Gil | Resident minimalist\n\nAlex is the Digital Scholarship Coordinator for the Humanities and History at Columbia University. He is vice chair of the Global Outlook::Digital Humanities initiative focusing on minimal computing and translation, is one of the founders and directors of Columbia’s Group for Experimental Methods in the Humanities and the Studio@Butler, and is actively engaged in several digital humanities projects at Columbia and around the world.\n\nJohann Gillium | Search master\n\nAfter having studied digital humanities at the Ecole nationale des Chartes in Paris, Johann has worked in France as a librarian at the Bibliothèque interuniversaire de Santé, where he most notably contributed to the Vesalius project, the digital edition of several works by the great anatomist Andreas Vesalius.\n\n\n\nAcknowledgments\n\nAs many open source projects, Ed is the work of community. The project starts with the open web, and everything in between leading to Jekyll and the wonderful team who wrangled that Ruby in our favor. The theme stylesheets are built on top of Lanyon, a Jekyll theme based on Poole, “the Jekyll butler,” both created by Mark Otto and distributed with an MIT license. Thanks, Mark, for your helpful streamlining! Special hat tips to brother-in-markdown-arms, Chris Forster, and the generous Sylvester Keil for his work on Jekyll Scholar.\n\nWe are strongly indebted to the research work and conversations stemming out of our Columbia’s Group for Experimental Methods in the Humanities—or as we like to call it: #xpmethod; the wonderful international comradery of GO::DH; and of course, the support of our Columbia University Libraries and its cozy Studio@Butler.\n\n…and to the writers that inspire us to scribble notes on the margins we protect with our work. Thank you.\n\n",
  id: 3
});
index.addDoc({
  title: "Documentation",
  author: "Alex Gil",
  layout: "page",
  content: "Contents\n\n\n  Prerequisites\n  Installing Ed: Easy\n  Installing Ed: Robust\n  Installing Ed: Replacing an existing Jekyll theme\n  Jekyll\n  Markdown and kramdown\n  Genres\n  Footnotes\n  Blockquotes\n  Pages\n  Tables of Content\n  Bibliographies\n  Tips and Tricks\n  Publishing: A UNIX server\n  Publishing: GitHub pages\n\n\n\n\nPrerequisites\n\nThis documentation was built with beginners in mind, but has the necessary information for more seasoned producers.\n\nTo install and use Ed you will be using your terminal. If you need a refresher, I highly recommend “The Command Line Crash Course.” Working knowledge of HTML and CSS is also taken for granted. If you’re new to HTML and CSS, you may want to check out the relevant courses on codecademy.com.\n\nJekyll does not run very well on Windows machines for now. If you are using Windows, this theme won’t work for you, but we hope that you simply deploy our principles, and parts of our stylesheet, on a system like Hugo, which does work on Windows.\n\n\n\nInstalling Ed: Easy\n\nThe easy way to do this is not necessarily the more robust, and may simply not work on your system. The easy way could also be called the ‘lucky’ way. It will work if your system is ready for Ed. Two major caveats to keep in mind if you go the easy route: a) You may run into problems later when some Ed components need updating; and, b) You may run into conflicts if you run several Ruby environments for different projects. That said, if you just want to quickly try Ed, and you don’t run into problems installing, this is perhaps the best approach.\n\nIf you’re using a Mac, make sure you have the appropriate version of XCode command line tools for your OSX. Using the terminal’s cd command, switch to the directory where you want to install your project. Once inside the folder, you are ready to download and start using Ed. Enter each of these lines into your terminal (remember to ignore the $):\n\n$ git clone https://github.com/elotroalex/ed.git\n$ cd ed\n$ gem install bundler\n$ bundle install\n\n\nThat’s it. To see if Ed is working properly we will take advantage of Jekyll’s built in server. You can build the first version of your site and run the jekyll server at the same time by entering:\n\n$ jekyll serve\n\n\nIf at any point during this process you had an error you could not resolve, move on to the next section. If the site was rendered fine, copy the url from your terminal log and paste it into your browser of choice (I recommend Firefox). This url usually looks something like this http://127.0.0.1:4000/ed. At this point you should be looking at your very own working version of Ed:\n\n\n\n\n\nInstalling Ed: Robust\n\nThe first step to install Ed is to download the source files from GitHub. To do so you must have git installed on your computer. You probably have git already, but if you don’t, the easiest way is probably to install Github Desktop (even though we will be using git and github from the terminal in this tutorial). Mac users may want to ensure they have Xcode and its command line tools installed as well. To check if git is running on your system enter the following line on your terminal (remember to ignore the $):\n\n$ git --version\n\n\nIf you don’t get an error, you’re good to go. Using the cd command on your terminal, navigate to the folder where you keep your web projects. Once you’re in the folder where you want Ed to live, download it from github using the following line (remember you can copy and paste):\n\n$ git clone https://github.com/elotroalex/ed.git\n\n\nAt this point you should navigate inside your Ed project folder and stay there until further notice:\n\n$ cd ed\n\n\nJekyll is a Ruby gem (Ruby’s name for software packages). The best way to ensure you have the right environment is to use Ruby Version Manager, or rvm, and the latest stable version of Ruby. To install rvm and a recent version of Ruby at the same time, follow the instructions on rvm’s site. Remember to add --ruby=2.3.0 at the end of the curl command to install ruby at the same time.\n\nAfter the process runs succesfully, read the last few lines generated by the terminal. You will see final instructions for making rvm run. Once you finish the process, check to see if rvm is running by entering:\n\n$ rvm --version\n\n\nIf you don’t get an error, you’re ready for the next step. If you do get an error, and don’t feel comfortable troubleshooting on the terminal, this is a good opportunity to reach out to a friend who can help. You can leave me a note on the issues page, for example. I’ll try to get to it as soon as my other commitments permit. If you’re comfortable troubleshooting on your own, I recommend Jekyll’s own troubleshooting documentation. Another great strategy for troubleshooting on the terminal is to copy and paste the errors you receive (sans personal information) into your favorite search engine.\n\nThe next step is to create a gemset for your jekyll projects. A gemset is a set of gems. If you don’t create and use a gemset, every gem you install will be applied system-wide. This is not necessarily a bad thing, but if you will have several projects with several setups, this strategy will serve you well in the long run. To create a gemset:\n\n$ rvm gemset create ed\n\n\nTo use the gemset you just created:\n\n$ rvm gemset use ed\n\n\nN.B. Everytime you open a new tab or window on your terminal you need to declare your gemset using rvm gemset use ed, or else it will revert to (default).\n\nNow that rvm and Ruby are set up, we’re ready to install our first gem: Bundler. Bundler is a gem that allows you to install many gems at the same time using Gemfiles, which is a simple list of specific gems that lives in your project folder. Once you install it, you will be ready to run the Gemfile I provided in the source files. To install Bundler:\n\n$ gem install bundler\n\n\nYou’re very close. Now that Bundler is installed, the final step is to install the right version of Jekyll. To do so run the Gemfile this way (remember you must be inside the ed folder for this to work):\n\n$ bundle install\n\n\nIf you don’t get any errors, Ed should work at this point. To see if Ed is working properly we will take advantage of Jekyll’s built in server. You can build the first version of your site and run the jekyll server at the same time by entering:\n\n$ jekyll serve\n\n\nIf you are running multiple Ruby environments using bundler, you will need to add bundle exec to the command:\n\n$ bundle exec jekyll serve\n\n\nCopy the url from your terminal log and paste it into your browser of choice (I recommend Firefox). This url usually looks something like this http://127.0.0.1:4000/ed. At this point you should be looking at your very own working version of Ed:\n\n\n\n\n\nInstalling Ed: Replacing an existing Jekyll theme\n\nEd, like Jekyll, is also a gem. Jekyll gives you the option to switch themes, as long as those themes are gems as well. If you have existing content and would like to use Ed, you need to add the following line to your _config.yml file, usually at the bottom:\n\ntheme: \"ed.\"\n\n\nYou also need to add the gem to your Gemfile file:\n\ngem \"ed.\", \"0.1.1\"\n\n\nMake sure to replace the version number with the one you need. I will do my best to document what changes come with each new gem. If your current theme does not have a Gemfile, you would need to create one and add the line above. The Gemfile is a plain text file like all other files in Jekyll, and should not have a file extension.\n\nAfter these files have been modified, you need to update your Bundle in the terminal:\n\n$ bundle update\n\n\nWhen using the gem on top of a previous theme, you will not have all the files of a full Ed install immediately available to you. More importantly, you may not have a _texts folder. You need to create one or copy them from a full installation of Ed. You might also want to add the search and index file. The gem comes bundled with all these files once you install it on your system, but they won’t be in the same folder as your project. To locate them you can refer to the Jekyll documentation for gem-based themes. With some previous themes you might need to erase lingering files that interfere with the functioning of Ed. This can be an advanced operation I can’t do justice to here. At that point you might need to familiarize yourself with the architecture of Jekyll, or pay close attention to errors when you try to serve the site, and reverse-engineer from there.\n\nGoing forward, updating to a new version of Ed is as simple as changing the release version and running the bundle update. I will try to keep changes in the actual markup to a minimum, but will let users know if any changes require a global find and replace in your editions.\n\n\n\nJekyll\n\nEd is a Jekyll theme. That means you will need some familiarity with Jekyll to take advantage of its full potential. While running a Jekyll site is a bit more involved than Wordpress and other similar tools, the payoff in the long term is worth the effort to learn it. If you are new to Jekyll, I recommend you take a look at “How (and Why) to Generate a Static Website Using Jekyll” at ProfHacker, Amanda Visconti’s excellent Building a static website with Jekyll and GitHub Pages on The Programming Historian and Jekyll’s own documentation to start getting a sense of how it works.\n\nOnce you have gone through these tutorials, you can get started using Ed by replacing the sample texts included in in the _texts folder in Ed with your own edited texts. Remember to always and only edit files in Ed using a plain text editor, and not a word processor. I’m composing this file using a plain text editor called Sublime Text.\n\nAn easy way to make new texts is to copy an existing text, replace the content and rename the file. Remember to always use the jekyll convention for naming files: your-title.md. You should also make sure that all your texts have the YAML front matter (the information at the top of the file). YAML stands for “YAML Ain’t Markup Language”—no disrespect to XML—and it’s the main way that Jekyll handles named data. Here’s an example of YAML front matter:\n\n---\nlayout: poem\ntitle: \"Cahier d'un retour au pays natal\"\nauthor: Aimé Césaire\n---\n\n\nBesides replacing content and creating new texts, you will probably  want to edit the _config.yml file to replace the boilerplate information we provided with your own personalized information in the relevant categories. Avoid replacing the information in categories that are not clear to you. Make sure to use proper YAML formatting when writing in the _config.yml file. Here’s a good reference source in case you have doubts.\n\n\n\nMarkdown and kramdown\n\nEd is designed for scholars and amateur editors who want to produce either a clean reading edition or a scholarly annotated edition of a text. The main language we use to write in the Jekyll environment is called Markdown. To learn more about the Markdown family, see Dennis Tenen and Grant Wythoff’s “Sustainable Authorship in Plain Text using Pandoc and Markdown.”\n\nOur version of Jekyll uses a special Markdown processor called kramdown. The processor can be said to use it’s own ‘flavor’ of Markdown, and sometimes the Markdown syntax will be different than other flavors of Markdown. Kramdown is convenient for scholars because of the way it handles footnotes. You can become familiar with the kramdown syntax in the kramdown documentation. Another way to become familiar is to examine the sample text source files we provided.\n\n\n\nGenres\n\nEd offers three different layouts: poem, narrative and drama. The genre is indicated in the YAML front matter on your texts. The templates that govern how these genres are displayed can be found in the _layouts folder. Using these layouts will allow you to tweak the stylesheets according to your different needs. Out of the box, Ed contains some special instructions for poetry in its stylesheets that allow you to deal with some of the peculiarities of poetry layouts.\n\nTo indicate lines in poetry we use the line syntax from Markdown:\n\n- Hold fast to dreams\n- For if dreams die\n- Life is a broken-winged bird\n- That cannot fly.\n- Hold fast to dreams\n- For when dreams go\n- Life is a barren field\n- Frozen with snow.\n\n\nTo indent specific lines we take advantage of a feature in kramdown that allows us to indicate classes for a line. This approach still allows the line to be readable while editing.\n\n- {:.indent-3} But O heart! heart! heart!\n- {:.indent-4} O the bleeding drops of red,\n- {:.indent-5} Where on the deck my Captain lies,\n- {:.indent-6} Fallen cold and dead.\n\n\nThe - at the beginning of each line indicates that these are lines. The {:.indent-3} is what we need to in order to indicate the indent value for that line. Values can range from 1-10. You can expand the range or adjust the values in the Ed stylesheet (_ed.scss) in the _sass folder.\n\nThe example from Raisin in the Sun shows us that we don’t need much special markup for theater as long as we use CAPITAL LETTERS for speakers. Italics for directions are easy enough. Just use * around the words you want to italicize.\n\nNarrative of the Life of Frederick Douglass shows us an example of narrative that includes footnotes and quoted poetry. See the sections below for how to accomplish these different effects.\n\n\n\nFootnotes\n\nFootnotes are the bread and butter of scholarship. Kramdown makes footnotes a fairly simple affair:\n\n- O Captain! my Captain! rise up and hear the bells; \n- Rise up—for you the flag is flung—for you the bugle[^fn2] trills,\n\n...\n\n[^fn2]: The bugle is a small trumpet implicated in the military industrial complex.\n\n\nThese footnotes can be placed anywhere, but they will always be generated at the bottom of the document. To have a multi-paragraph footnote you need to start the footnote text on the next line after the footnote anchor and indent it:\n\n[^fn3]:\n\tUgh pinterest fixie cronut pitchfork beard. Literally deep \n\tcold-pressed distillery pabst austin. \n\n\tTypewriter 90's roof party poutine, kickstarter raw \n\tdenim pabst readymade biodiesel umami chicharrones XOXO. \n\n\nThe footnotes system provided by kramdown does have one limitation: It generates the numeration for you automatically, and it only allows you to have one set of footnotes for a text. In some cases we have to separate the author’s footnotes from our own, in others we want to represent the author’s own footnote style. In these cases we have to use HTML. Here’s the example from Narrative of the Life:\n\n... At this time, Anna,&lt;sup&gt;&lt;a href=\"#fn2\" id=\"ref2\"&gt;\\*&lt;/a&gt;&lt;/sup&gt; my intended wife, came on;\n\n...\n\n&lt;sup id=\"fn2\"&gt;*&lt;/sup&gt; She was free. [&amp;#x21a9;&amp;#xfe0e;](#ref2)\n\n\nNotice the double HTML Entity (hex), &amp;#x21a9;&amp;#xfe0e;, used at the end of the footnote to return us to the top. The first hex is the ↩︎ symbol proper. The second assigns the proper variant glyph. This is a necessary hack while we wait for Apple devices to stop turning everything into unseemly emojis.\n\n\n\nBlockquotes\n\nNarrative of the Life also includes several blockquotes. You can also find another example of blockquote use in the footnote of “O Captain! My Captain!” Simple blockquotes are simple enough in kramdown:\n\n&gt; This is to certify that I, the undersigned, have given the bearer, my servant, full liberty to go to Baltimore, and spend the Easter holidays.\n&gt;\n&gt; Written with mine own hand, &amp;c., 1835.  \n&gt; WILLIAM HAMILTON,\n\n\nTo use a line break in block elements add two spaces after the end of the line where you want the break. You can’t see them after &amp;c., 1835. but they are there.\n\nThings get a bit complicated when we want to use poetry inside the block or when the block is included in another block element, like a footnote. Here’s the last two stanzas from “A Parody” in Narrative of the Life, which shows an example of a blockquote of poetry:\n\n...\n&gt; - Two others oped their iron jaws,\n&gt; - And waved their children-stealing paws;\n&gt; - There sat their children in gewgaws;\n&gt; - By stinting negroes' backs and maws,\n&gt; - They kept up heavenly union.\n&gt; ^\n&gt; - All good from Jack another takes,\n&gt; - And entertains their flirts and rakes,\n&gt; - Who dress as sleek as glossy snakes,\n&gt; - And cram their mouths with sweetened cakes;\n&gt; - And this goes down for union.\n{:.poetry}\n\n\nThe {:.poetry} tag at the end tells the processor to think of the lines above it as poetry. The {:.poetry} tag is an example of kramdown class assignments for block-elements. Because this segment of poetry exists in the ‘narrative’ layout, and because it is part of a blockquote, we need to signal to the processor to process poetry this way, so that the right class is invoked in the stylesheet. Notice also the ^ separating the stanzas. This bit of kramdown syntax helps us separate the stanzas while staying within the blockquote. The good news is this is the most complex kramdown syntax layout you will encounter in Ed.\n\nPages\n\nYour editions are treated as collections in Ed. Other web pages in your site exist outside the _texts folder. The homepage, for example, is constructed from the index.html file found on the root folder of your Ed project.\n\nYou will notice that the homepage in particular has a .html file ending instead of a .md ending. All template files in Jekyll are HTML, and the index behaves as a template file. Although these files are mostly written in HTML, notice that they still contain YAML front matter and liquid tags. To edit the homepage replace the content on the file shipped with Ed, making sure that your changes to index.html are written in valid HTML. The same goes for the template files in the _layouts folder.\n\nEd also comes with a search page, search.html. This page implements elastic lunr, “a lightweight full-text search engine in Javascript for browser search and offline search.” This simple search page can be useful if you have large collections of texts. If you don’t, and don’t feel the need, go ahead and delete it along with the assets/js folder.\n\nBesides the homepage and the search page, Ed ships with an About page, about.md and a documentation page, documentation.md, i.e. this page. As you can see, these are regular .md files. You can replace the contents of each file using normal kramdown syntax. This also applies to any new page you create, which you should remember to save with an .md extension. When editing the bibliography.md file, be careful not to replace the liquid tag that generates your bibliography, unless you don’t want to have a bibliography at all.\n\n\n\nTables of Content\n\nYou will find three kinds of Tables of Content in Ed. The first example is in the list of Sample Texts in the Homepage. This list is generated using the Liquid Templating language. This is one of the major components of Jekyll, and I recommend you deepen your knowledge of it if you want to modify the logic that automates much of Ed. Here is the code that generates the Sample Texts list on the homepage:\n\n&lt;div class=\"toc\"&gt;\n  &lt;h2&gt;Sample texts&lt;/h2&gt;\n  &lt;ul class=\"post\"&gt;\n  \n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\nAs you can see, the liquid tags {% %} and {{ }} are embedded into the HTML. Those with {% %} often use programmatic logic, as is the case here. If you are not already familiar with programming languages, you may need to start elsewhere. I recommend learning Ruby, since this is the language used to build jekyll and jekyll-scholar in the first place (it’s also the first programming language I used, so I’m biased). The {{ }} simply pulls data from your project. In the example above it pulls the title from each ‘post’, i.e. each edited text. As you may have noticed already, we are basically adapting the blogging features of Jekyll to our own ends, what Cuban designer and theorist Ernesto Oroza would call “technological dissobedience.”\n\nThe second kind of table of content is exemplified in this documentation. If you open the source file for the documentation, you will notice at the top this snippet:\n\n## Contents\n{:.no_toc}\n\n* ToC\n{:toc}\n\n\nThis is the kramdown way. The first tag, {:.no_toc} tells the processor not to add ## Contents to the ToC. The second part creates an empty list and then tells the processor to replace it with a table of contents based on headers in the document. You can use this syntax in any page on the site that uses headers.\n\nThe third way is slightly more involved, but very useful for long texts. If we add the table of contents to the YAML front matter of a page, Ed will activate the optional table of content sidebar (_includes/sidebar-toc.html) and move the table of contents to a special sidebar for that page. Narrative of the Life uses this method for its table of content. If you would like to replicate this functionality in your own long texts, make sure to use the same syntax:\n\ntoc:\n- Title Page\n- Preface\n- Letter From Wendell Phillips\n- Chapter I\n- Chapter II\n\n\nThe internal links pointing to the right sections in your document are generated from the title names automatically. In order for the links to work the names on section headings must contain the same words as the section headers. The punctuation and capitalization is irrelevant. If you can figure out how Ed accomplishes this trick, you have graduated from the Ed school of minimal editions.\n\n\n\nBibliographies\n\nIf you want to include a small bibliography, and you feel it would be easier to write it out directly, Ed can help you render it with hanging indentation.  To achieve this effect make sure to use the .bibliography class in an ordered list. For example:\n\n1. Douglass, Frederick et al. Narrative of the Life of Frederick Douglass: An American Slave. Charlottesville, Va.: University of Virginia Library, 1996. Open WorldCat. Web. 17 Apr. 2016.\n2. Hansberry, Lorraine, and Robert Nemiroff. A Raisin in the Sun. Rep Rei edition. New York: Vintage, 2004. Print.\n{.bibliography}\n\n\nWhich should display like this:\n\n\n  Douglass, Frederick et al. Narrative of the Life of Frederick Douglass: An American Slave. Charlottesville, Va.: University of Virginia Library, 1996. Open WorldCat. Web. 17 Apr. 2016.\n  Hansberry, Lorraine, and Robert Nemiroff. A Raisin in the Sun. Rep Rei edition. New York: Vintage, 2004. Print.\n\n\n\n\nTo help us style and generate bibliographies and citations automatically, Ed can use the jekyll-scholar gem by Sylvester Keil. To learn more about the gem beyond the basic instructions below, make sure to read the documentation on the jekyll-scholar GitHub page. Keep in mind, though, that installing jekyll-scholar and working with it may be a bit difficult for beginners.\n\nIf you can get over the hurdles, jekyll-scholar can save you enormous amounts of time in the long term for your citation and bibliographic work. To begin, you must move the contents of the jekyll-scholar starter kit in your optional folder into the root folder. This will effectively replace the original _config.yml and Gemfile files, and add a _bibliography folder, and the bibliography.md and Rakefile files. To enable jekyll-scholar you must re-run bundle install again.\n\nIf everything goes smoothly, you should be able to start using jekyll-scholar at this point. The first thing you may want to do is provide Jekyll with your own bibliographic information in the form of a .bib file to replace the content of the references.bib file we’ve provided in the _bibliography folder.\n\nTo make it easy to create your own version of this file and to keep track of your bibliography for your project, in general I recommend you use Zotero. To export from Zotero in this format select the references you need from within your Zotero library, right click and select export in... and choose the BibLaTeX format. Rename your file to references.bib and move it into the _bibliography folder. You are, of course, free to create your references.bib file using any method you prefer as long as it is a BibTeX file.\n\nBecause as textual editors we are more likely than not to use citations in footnotes or pages that contain footnotes, and because footnotes will be necessarily generated at the bottom of the page, Ed also needs a separate page for your Bibliography or works cited. This is the role of the bibliography.md file. Feel free to edit the sample text, but make sure to leave the following line intact:\n\n\n&#123;% bibliography %&#125;\n\n\nTo link your citations to the bibliography page, instead of writing them by hand, you can use the cite function in jekyll-scholar:\n\n\n&#123;% cite cesaire_discourse_2001 %&#125;\n\n\nHere’s the breakdown:\n\n\n  cite is the jekyllscholar command.\n  cesaire_discourse_2001 is the unique ID for Césaire’s Discourse on Colonialism entry included in the reference.bib file.\n\n\nNote that our jekyll-scholar starter kit comes ready for MLA style. To use Chicago style or more advanced citation features, refer to the documentation on jekyll-scholar to make the appropriate changes.\n\nPublishing your site on Github Pages with jekyll-scholar\n\nIf you install jekyll-scholar, or most other plugins in Jekyll, you will need a workaround to publish your site on Github Pages, which only runs in ‘safe mode.’ I’ve provided a slightly modified version of a Rakefile originally created by Robert Rawlins that will help you accomplish this task. Once you are ready to publish, switch to your gh-pages branch and run the following command:\n\n$ rake ed:publish\n\n\n\n\nTips and Tricks\n\n\n  The folding sidebar menu is generated from the sidebar.html file in the _includes folder. The top menu items are generated automatically from your pages. The bottom menu items are manually written in HTML. This structure can allow you to add external links. If you don’t have that many pages, you may choose to do all the links by hand.\n  For more hand-crafted layouts—such as the title page in The Narrative of the Life—you may choose to work directly with HTML. One of the great advantages of working with the kramdown processor is that we have a lot of flexibility to mix HTML with the kramdown syntax. Note though, that even in the case of the title page, you can achieve these effects using kramdown syntax.\n  Make sure to add horizontal rules, ---, to separate sections in your texts. This creates a more pleasant layout.\n  You can clean unnecessary folders and files from the original Ed package before publishing your site. This will help you reduce overhead. For example, you can erase this page, the sample texts and the syntax.css file (used for styling code).\n  Consider providing tips for your readers on how to make their font bigger or smaller by taking advantage of Command + + and Command + -. Or returning to the top of the page using Command + Up Arrow. Part of the philosophy behind Ed is to avoid duplicating features that are already easily available in most web ecosystems.\n  If you want to allow annotations on your site, consider providing a via.hypothes.is link. Our sample site can be annotated, for example, using the following link: https://via.hypothes.is/http://elotroalex.github.io/ed/, which readers can access on the sidebar. Once you’ve indicated your own URL in the config file, the link will update automatically. Make sure to visit hypothes.is to learn more.\n  Ed includes metadata in the headers that makes it easier for users of Zotero, and other systems to grab bibliographic information for the site and individual texts. Our metadata functionality may not be enough to generate a full proper citation. Consider providing visible citation information in your about page or homepage.\n  Make sure to deepen your knowledge of the building blocks of Ed: Jekyll, YAML and Liquid. A great list of resources can be found in the blog “Jekyll for Web Designers”.\n  Our base themes Poole/Lanyon allow for easily customization of the interface. You can, for example, switch the position of the sidebar, change the theme colors and overlay options. To learn more check out the Lanyon documentation, and make sure to try the green, .theme-base-0b, it’s really nice.\n  You can change the look and feel of the site as a whole by changing the color-scheme in the _config.yml file. If you want to have more granularity, short of editing the css, you can change the variable values in the assets/css/style.scss file.\n  In the optional folder you will find a sample xslt to help you get started converting TEI to Ed. You will also find css for adding pop-up “balloons” or tooltips to your texts.\n\n\n\n\nPublishing: A UNIX server\n\nPublishing and Ed edition can be done in one of two ways. One way is to host it on a server you rent, own or have access to. Most mortals pay a hosting provider to host their sites. I recommend Reclaim Hosting, which is run by scholars for scholars. If you are affiliated with a university, chances are that your institution provides you with a UNIX account and a bit of server space. Since Jekyll generates a full static site for you, that means you can park it there too. To do so you need to build the site first. If you have been keeping your eye on your project by using jekyll serve, chances are you have a current built site in your project folder labelled _site.\n\nIf you don’t already, you can build one easily by using the following Jekyll command:\n\n$ jekyll build\n\n\nOr, again, if you have multiple environments:\n\n$ bundle exec jekyll serve\n\n\nUsing an FTP client like Filezilla, or SSH on your terminal, you need to push the contents of the _site folder to the folder on your server where you would like your project to exist. Depending on your host provider, you may be able to receive help from the sys admins with this step.\n\nPlease refer to the note below on base urls to make sure your new links work on your new site.\n\nPublishing: GitHub pages\n\nThe second option is to publish your site for free on GitHub Pages. \nWhether you decide to publish on GitHub pages or not, we recommend that you still use git and GitHub to version your edition and make the data available via another channel other than your webpage. This is one of the great advantages of using our system, increasing the chances of survival of your work and opening new audiences for it.\n\nIf you do decide to use the GitHub pages option, please make sure to read the note below on base urls.\n\nTo publish on GitHub pages, you must have a copy of the repository in GitHub. That means you also need an account there. Once you’ve created the repository that you will use, you must link your local repository to the one on GitHub. Notice that because you cloned the original source files from my repository, it will be linked to my repository (to which you don’t have writing privileges) until you do this step. Instructions for changing the remote URL can be found here.\n\nThe usual way of doing it is to create a different git branch called gh-pages within your local repository for your site. This is a branch is published by GitHub by default. GitHub also gives you the option to select any branch you want to publish, including the master branch.\n\nIn the following I use the gh-pages branch. To create and use that branch use the following command:\n\n$ git checkout -b gh-pages\n\n\nOnce you are using that branch, you are ready to publish your site. To do so use simply push the gh-pages branch to github:\n\n$ git push origin gh-pages\n\n\nYou can now access your site using an address that looks like http://your-username.github.io/your-project-name. The sample page for Ed, for example, is hosted at elotroalex.github.io/ed.\n\nA note on your base url\n\nWhen you publish on a subfolder—automatic on GitHub pages—many of your links will break unless you indicate the name of your sub-folder in the baseurl value in your _config.html file. In addition, you need to make sure that your site-wide links (your links to your CSS files, for example) are preceded by the /ed tag. The base Ed install already uses this system, so you can simply replace the value /ed in your baseurl to /your-project-slug.\n\nIf on the other hand you are running your site on a root folder, simply erase /ed, but do make sure to leave the single quotes:\n\nbaseurl: ''\n\n\n\n\nThat should do it. If you have suggestions on how to improve Ed, make sure to leave us a line on our issues page, or send us a pull request.\n\nHappy editing!\n\nAlex Gil\nApril 2016\n",
  id: 4
});
index.addDoc({
  title: "Ed.",
  author: null,
  layout: "default",
  content: "\n  hi.\n\nEd is a Jekyll theme designed for textual editors based on minimal computing principles, and focused on legibility, durability, ease and flexibility. Our underlying technology is easy to learn and teach, and can produce beautifully rendered scholarly or reading editions of texts meant to last. To start using Ed, please see our documentation for installation instructions and more. To learn more about the ideas behind Ed and a list of current features see our about section. To see Ed in action, we've provided some sample minimal editions for you below.\n\n\n\n\n\n  sample texts\n  \n  \n  \n\n\n\n\n",
  id: 5
});
index.addDoc({
  title: "Search",
  author: null,
  layout: "page",
  content: "\nIn case you don't want to use the search box provided by your browser:\n\n\n\n\n\n\n\n\n",
  id: 6
});
index.addDoc({
  title: null,
  author: null,
  layout: null,
  content: "// Based on a script by Kathie Decora : katydecorah.com/code/lunr-and-jekyll/\n\n// Create the lunr index for the search\nvar index = elasticlunr(function () {\n  this.addField('title')\n  this.addField('author')\n  this.addField('layout')\n  this.addField('content')\n  this.setRef('id')\n});\n\n// Add to this index the proper metadata from the Jekyll content\n{% assign count = 0 %}{% for text in site.pages %}\nindex.addDoc({\n  title: {{text.title | jsonify}},\n  author: {{text.author | jsonify}},\n  layout: {{text.layout | jsonify}},\n  content: {{text.content | jsonify | strip_html}},\n  id: {{count}}\n});{% assign count = count | plus: 1 %}{% endfor %}\n\n// Builds reference data (maybe not necessary for us, to check)\nvar store = [{% for text in site.pages %}{\n  \"title\": {{text.title | jsonify}},\n  \"author\": {{text.author | jsonify}},\n  \"layout\": {{ text.layout | jsonify }},\n  \"link\": {{text.url | jsonify}},\n}\n{% unless forloop.last %},{% endunless %}{% endfor %}]\n\n// Query\nvar qd = {}; // Gets values from the URL\nlocation.search.substr(1).split(\"&\").forEach(function(item) {\n    var s = item.split(\"=\"),\n        k = s[0],\n        v = s[1] && decodeURIComponent(s[1]);\n    (k in qd) ? qd[k].push(v) : qd[k] = [v]\n});\n\nfunction doSearch() {\n  var resultdiv = document.querySelector('#results');\n  var query = document.querySelector('input#search').value;\n\n  // The search is then launched on the index built with Lunr\n  var result = index.search(query);\n  resultdiv.innerHTML = \"\";\n  if (result.length == 0) {    \n    resultdiv.append(document.createElement('p').innerHTML = 'No results found.');\n  } else if (result.length == 1) {\n    resultdiv.append(document.createElement('p').innerHTML = 'Found '+result.length+' result');\n  } else {\n    resultdiv.append(document.createElement('p').innerHTML = 'Found '+result.length+' results');\n  }\n  // Loop through, match, and add results\n  for (var item in result) {\n    var ref = result[item].ref;\n    res = document.createElement('div')\n    res.classList.add(\"result\")\n    link = document.createElement('a')\n    link.setAttribute('href', '{{site.baseurl}}'+store[ref].link+'?q='+query)\n    link.innerHTML = store[ref].title || 'Untitled page'\n    p = document.createElement('p')\n    p.appendChild(link)\n    res.appendChild(p)\n    resultdiv.appendChild(res)\n  }\n}\n\nvar callback = function(){\n  searchInput = document.querySelector('input#search') \n  if (qd.q) {\n    searchInput.value = qd.q[0];\n    doSearch();\n  }\n  searchInput.addEventListener('keyup', doSearch);\n};\n\nif (\n    document.readyState === \"complete\" ||\n    (document.readyState !== \"loading\" && !document.documentElement.doScroll)\n) {\n  callback();\n} else {\n  document.addEventListener(\"DOMContentLoaded\", callback);\n}\n",
  id: 7
});
index.addDoc({
  title: null,
  author: null,
  layout: null,
  content: "/*\n  Common Variables\n\n  Feel free to change!\n*/\n\n/* Fonts */\n$main-font: \"Palatino Linotype\", \"Book Antiqua\", Palatino, serif;\n$heading-font: sans-serif;\n$regular-font-size: 1.25em; /* 20px / 16px = 1.25em; support text resizing in all browsers */\n\n\n/*\n  Color\n\n  Make sure to leave color-scheme in `_config.yml` file empty for granular control\n*/\n\n$text-color: #454545;\n$heading-color: #404040;\n$link-color: #34bd9a;\n\n@import \"ed\";\n@import \"syntax\";\n@import \"CETEIcean.css\";\n\n*{font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}\n.poster img { float: center; width: 50%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.poster p { float: center; width: 50%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n\n.trailer img { float: center; width: 15%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n\n\n.ficha img { float: right; max-width: 60%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.ficha h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.ficha h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.fichatecnica p { font-size: large; font-style: bold; color: black; text-align: center; }\n.fichatecnica img { float: right; max-width: 60%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.fichatecnica h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.fichatecnica h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n\n.fichasinopsis p { font-size: large; font-style: bold; color: black; text-align: justify; }\n.fichasinopsis img { float: right; max-width: 60%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.fichasinopsis h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.fichasinopsis h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.autor h1 { font-size: large; font-style: bold; color: black; text-decoration: underline; text-align: center; background-color: hsl(165, 85%, 63%); }\n.autor p { font-size: large; font-style: bold; color: black; text-align: center; background-color: hsl(165, 85%, 63%); }\n\n.arriba img { float: right; width: 5%; margin-bottom: 210px; margin-left: 50px; margin-top: 30px; }\n.indice img { float: left; width: 10%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n.indicehome img { float: left; width: 10%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n.arribaindice img { float: right; width: 5%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n.creditobusqueda img { float: left; width: 10%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n\n\n.search img { float: center; width: 10%; margin-bottom: 0px; margin-right: 0px; margin-top: 100px; margin-left: 150px;}\n\n\n\n.home p { font-size: large; font-style: bold; color: black; text-align: justify;  }\n.home h1 { font-size: x-large; font-style: bold; color: black; text-decoration: underline; text-align: center; background-color: hsl(165, 85%, 63%); }\n.home h2 { font-size: large; font-style: bold; color: black; text-align: justify;  }\n.home h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n.home h4 { font-size: large; font-style: bold; color: black; text-align: right;  }\n.home img { float: center; max-width: 10%; margin-bottom: 0; margin-left: 320px; margin-top: 0px; }\n\n.fpc img { float: center; max-width: 70%; margin-bottom: 0; margin-left: 300px; margin-top: 0px; }\n\n.indiceficha img { float: center; max-width: 30%; margin-bottom: 0; margin-left: 230px; margin-top: 0px; }\n.indiceficha h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.indiceficha h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.busquedap img { float: center; max-width: 25%; margin-bottom: 0; margin-left: 280px; margin-top: 0px; }\n.busquedap h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.busquedap h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.busquedap form { size: large ; align-items: center;}\n\n.footer p { font-size: xx-small; font-style: bold; margin-left: auto; margin-right: auto; color: grey; text-align: center;  margin-top: 0% }\n.footer H1 { font-size: x-small; font-style: bold; color: rgb(59, 55, 55); margin-left: auto; margin-right: auto;text-align: center ;  margin-top: 0%}\n.footer img { width: 200px; height: 200px; margin-bottom: 0;  margin-left: auto; margin-right: auto; margin-top: 0px; }\n\n* {\n  margin: 0;\n}\nhtml, body {\n  height: 100%;\n}\n.wrapper {\n  min-height: calc(100% - 4rem);\n}\n.footer {\n  height: 4rem;\n\n}",
  id: 8
});
index.addDoc({
  title: null,
  author: null,
  layout: null,
  content: "/*\n  Common Variables\n\n  Feel free to change!\n*/\n\n/* Fonts */\n$main-font: \"Palatino Linotype\", \"Book Antiqua\", Palatino, serif;\n$heading-font: sans-serif;\n$regular-font-size: 1.25em; /* 20px / 16px = 1.25em; support text resizing in all browsers */\n\n\n/*\n  Color\n\n  Make sure to leave color-scheme in `_config.yml` file empty for granular control\n*/\n\n$text-color: #454545;\n$heading-color: #404040;\n$link-color: #34bd9a;\n\n@import \"ed\";\n@import \"syntax\";\n@import \"CETEIcean.css\";\n\n*{font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}\n.poster img { float: center; width: 50%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.poster p { float: center; width: 50%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n\n.trailer img { float: center; width: 15%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n\n\n.ficha img { float: right; max-width: 60%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.ficha h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.ficha h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.fichatecnica p { font-size: large; font-style: bold; color: black; text-align: center; }\n.fichatecnica img { float: right; max-width: 60%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.fichatecnica h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.fichatecnica h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n\n.fichasinopsis p { font-size: large; font-style: bold; color: black; text-align: justify; }\n.fichasinopsis img { float: right; max-width: 60%; margin-bottom: 0; margin-left: 20px; margin-top: 20px; }\n.fichasinopsis h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.fichasinopsis h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.autor h1 { font-size: large; font-style: bold; color: black; text-decoration: underline; text-align: center; background-color: hsl(165, 85%, 63%); }\n.autor p { font-size: large; font-style: bold; color: black; text-align: center; background-color: hsl(165, 85%, 63%); }\n\n.arriba img { float: right; width: 5%; margin-bottom: 210px; margin-left: 50px; margin-top: 30px; }\n.indice img { float: left; width: 10%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n.indicehome img { float: left; width: 10%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n.arribaindice img { float: right; width: 5%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n.creditobusqueda img { float: left; width: 10%; margin-bottom: 210px; margin-left: 105px; margin-top: 30px; }\n\n\n.search img { float: center; width: 10%; margin-bottom: 0px; margin-right: 0px; margin-top: 100px; margin-left: 150px;}\n\n\n\n.home p { font-size: large; font-style: bold; color: black; text-align: justify;  }\n.home h1 { font-size: x-large; font-style: bold; color: black; text-decoration: underline; text-align: center; background-color: hsl(165, 85%, 63%); }\n.home h2 { font-size: large; font-style: bold; color: black; text-align: justify;  }\n.home h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n.home h4 { font-size: large; font-style: bold; color: black; text-align: right;  }\n.home img { float: center; max-width: 10%; margin-bottom: 0; margin-left: 320px; margin-top: 0px; }\n\n.fpc img { float: center; max-width: 70%; margin-bottom: 0; margin-left: 300px; margin-top: 0px; }\n\n.indiceficha img { float: center; max-width: 30%; margin-bottom: 0; margin-left: 230px; margin-top: 0px; }\n.indiceficha h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.indiceficha h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.busquedap img { float: center; max-width: 25%; margin-bottom: 0; margin-left: 280px; margin-top: 0px; }\n.busquedap h2 { font-size: xx-large; font-style: bold; color: #34bd9a; text-decoration: underline; text-align: center; }\n.busquedap h3 { font-size: x-large; font-style: bold; color:#34bd9a; }\n\n.busquedap form { size: large ; align-items: center;}\n\n.footer p { font-size: xx-small; font-style: bold; margin-left: auto; margin-right: auto; color: grey; text-align: center;  margin-top: 0% }\n.footer H1 { font-size: x-small; font-style: bold; color: rgb(59, 55, 55); margin-left: auto; margin-right: auto;text-align: center ;  margin-top: 0%}\n.footer img { width: 200px; height: 200px; margin-bottom: 0;  margin-left: auto; margin-right: auto; margin-top: 0px; }\n\n* {\n  margin: 0;\n}\nhtml, body {\n  height: 100%;\n}\n.wrapper {\n  min-height: calc(100% - 4rem);\n}\n.footer {\n  height: 4rem;\n\n}",
  id: 9
});

// Builds reference data (maybe not necessary for us, to check)
var store = [{
  "title": "404: Page not found",
  "author": null,
  "layout": "default",
  "link": "/404.html",
}
,{
  "title": "About",
  "author": null,
  "layout": "page",
  "link": "/about/",
}
,{
  "title": null,
  "author": null,
  "layout": null,
  "link": "/atom.xml",
}
,{
  "title": "Credits",
  "author": null,
  "layout": "page",
  "link": "/credits/",
}
,{
  "title": "Documentation",
  "author": "Alex Gil",
  "layout": "page",
  "link": "/documentation/",
}
,{
  "title": "Ed.",
  "author": null,
  "layout": "default",
  "link": "/",
}
,{
  "title": "Search",
  "author": null,
  "layout": "page",
  "link": "/search/",
}
,{
  "title": null,
  "author": null,
  "layout": null,
  "link": "/assets/js/search.js",
}
,{
  "title": null,
  "author": null,
  "layout": null,
  "link": "/assets/css/style%20copy.scss%20OJO%20VIEJO",
}
,{
  "title": null,
  "author": null,
  "layout": null,
  "link": "/assets/css/style.scss%20OJO%20VIEJO",
}
]

// Query
var qd = {}; // Gets values from the URL
location.search.substr(1).split("&").forEach(function(item) {
    var s = item.split("="),
        k = s[0],
        v = s[1] && decodeURIComponent(s[1]);
    (k in qd) ? qd[k].push(v) : qd[k] = [v]
});

function doSearch() {
  var resultdiv = document.querySelector('#results');
  var query = document.querySelector('input#search').value;

  // The search is then launched on the index built with Lunr
  var result = index.search(query);
  resultdiv.innerHTML = "";
  if (result.length == 0) {    
    resultdiv.append(document.createElement('p').innerHTML = 'No results found.');
  } else if (result.length == 1) {
    resultdiv.append(document.createElement('p').innerHTML = 'Found '+result.length+' result');
  } else {
    resultdiv.append(document.createElement('p').innerHTML = 'Found '+result.length+' results');
  }
  // Loop through, match, and add results
  for (var item in result) {
    var ref = result[item].ref;
    res = document.createElement('div')
    res.classList.add("result")
    link = document.createElement('a')
    link.setAttribute('href', '/ed'+store[ref].link+'?q='+query)
    link.innerHTML = store[ref].title || 'Untitled page'
    p = document.createElement('p')
    p.appendChild(link)
    res.appendChild(p)
    resultdiv.appendChild(res)
  }
}

var callback = function(){
  searchInput = document.querySelector('input#search') 
  if (qd.q) {
    searchInput.value = qd.q[0];
    doSearch();
  }
  searchInput.addEventListener('keyup', doSearch);
};

if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
) {
  callback();
} else {
  document.addEventListener("DOMContentLoaded", callback);
}
